openapi: 3.0.3
info:
  title: Sofia ToDo - OpenAPI 3.0
  description: |-
    This is a sample ToDo App Server based on the OpenAPI 3.0 specification.
  contact:
    email: sofia.dissegna93@gmail.com
  version: 0.0.0
tags:
  - name: item
    description: Everything about Todo Items
  - name: user
    description: Operations about user
paths:
  /items:
    put:
      tags:
        - item
      summary: Updated an existing item
      description: Update an existing item by Id
      operationId: updateItem
      requestBody:
        description: Update an existent to do item
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
      security:
        - user_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - item
      summary: Add a new item to the store
      description: Add a new item to the store
      operationId: addItem
      requestBody:
        description: Create a new item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
          application/xml:
            schema:
              $ref: '#/components/schemas/Item'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '405':
          description: Invalid input
      security:
        - user_auth:
            - write:items
            - read:items
  /items/findByStatus:
    get:
      tags:
        - item
      summary: Finds items by status
      description: Status values can be provided
      operationId: findItemsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: number
            default: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid status value
      security:
        - user_auth:
            - write:items
            - read:items
  /items/findByTags:
    get:
      tags:
        - item
      summary: Finds Items by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findItemsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid tag value
      security:
        - user_auth:
            - write:items
            - read:items
  /items/{itemId}:
    get:
      tags:
        - item
      summary: Find item by ID
      description: Returns a single todo item
      operationId: getItemById
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
      security:
        - api_key: []
        - user_auth:
            - write:items
            - read:items
    post:
      tags:
        - item
      summary: Updates a item in todo
      description: ''
      operationId: updateItemWithForm
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of item that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of item that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - user_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - item
      summary: Deletes a item
      description: delete a item
      operationId: deleteItem
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid item value
      security:
        - user_auth:
            - write:item
            - read:item
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Item:
      required:
        - title
        - status
        - userId
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: My to do
        status:
          type: number
          format: int64
          example: 1
        userId:
          type: number
          format: int64
          example: 1
        projectId:
          type: number
          format: int64
          example: 1
        parentId:
          type: number
          format: int64
          example: 1
      xml:
        name: item
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Item:
      description: Item object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
        application/xml:
          schema:
            $ref: '#/components/schemas/Item'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:items: modify items in your account
            read:items: read your items
    api_key:
      type: apiKey
      name: api_key
      in: header
